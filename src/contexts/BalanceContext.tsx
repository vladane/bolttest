import { createContext, useContext, ReactNode, useCallback, useEffect, useMemo, useRef } from 'react';
import { useAppState } from './AppStateContext';
import { calculateCraftResultValue } from '../utils/priceCalculation';
import { ItemData } from './AppStateContext';

// –ü–µ—Ä–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º ItemData –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export type { ItemData };

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
type ComparableObject = Record<string, any>;

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ BalanceConfig —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ–∑–æ–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
export interface BalanceConfig {
  id: string;
  name: string;
  baseValue: number;
  weights: {
    categoryWeight: number;
    tierWeight: number;
    mechanicWeight: number;
    modifiersWeight: number;
    locationsWeight: number;
    frequencyWeight: number;
    craftComplexityWeight: number;
  };
  categories: Record<string, number>;
  mechanics: Record<string, number>;
  tierMultiplier: number;
  modifiers: Record<string, number>;
  locations: Record<string, number>;
  frequencyTypes: Record<string, number>;
  craftComplexityTypes: Record<string, number>;
  subTypeModifiers: Record<string, number>; // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥—Ç–∏–ø–æ–≤
  
  // –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  currentSeason: string; // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∑–æ–Ω
  seasons: string[]; // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤
  seasonalCategoryModifiers: Record<string, Record<string, number>>; // –°–µ–∑–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  seasonalSubTypeModifiers: Record<string, Record<string, number>>; // –°–µ–∑–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤
  growthDayMultiplier: number; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–Ω—è —Ä–æ—Å—Ç–∞ —É—Ä–æ–∂–∞—è
  
  sellDiscount: number;
  buyMarkup: number;
  craftBaseMultiplier: number;
  craftComplexityMultiplier: number;
  version: string;
  createdAt: string;
  craftTimeConfig?: {
    baseTimesByComplexity: {
      '–û—á–µ–Ω—å –ª–µ–≥–∫–æ': number;
      '–õ–µ–≥–∫–æ': number;
      '–°—Ä–µ–¥–Ω–µ': number;
      '–°–ª–æ–∂–Ω–æ': number;
      '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ': number;
    };
    ingredientBaseTime: number;
    ingredientScalingFactor: number;
    levelMultiplier: number;
    categoryTimeMultipliers: Record<string, number>;
    version?: number;
  };
}

export interface BalanceContextType {
  currentConfig: BalanceConfig;
  savedConfigs: BalanceConfig[];
  comparisonItems: ItemData[];
  updateConfig: (config: Partial<BalanceConfig>) => void;
  saveCurrentConfig: (name?: string) => void;
  createNewConfig: (name: string) => void;
  loadConfig: (configId: string) => void;
  deleteConfig: (configId: string) => void;
  addItemToComparison: (item: ItemData) => void;
  removeItemFromComparison: (index: number) => void;
  calculateItemCost: (item: ItemData) => number;
  calculateSeasonalItemCost: (item: ItemData, season?: string) => number; // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  updateItemInComparison: (index: number, updatedItem: ItemData) => void;
  updateCraftValuesForAllItems: () => void;
  setCurrentSeason: (season: string) => void; // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
  getSeasonalProfitability: (item: ItemData) => Record<string, number>; // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
}

const BalanceContext = createContext<BalanceContextType | null>(null);

export function useBalance(): BalanceContextType {
  const context = useContext(BalanceContext);
  
  if (context === null) {
    throw new Error('useBalance must be used within a BalanceProvider');
  }
  
  return context;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∑–æ–Ω—ã
export const DEFAULT_SEASONS = ['–í–µ—Å–Ω–∞', '–õ–µ—Ç–æ', '–û—Å–µ–Ω—å', '–ó–∏–º–∞'];

export function BalanceProvider({ children }: { children: ReactNode }) {
  const { state, updateState } = useAppState();
  const currentConfig = state.balance.currentConfig;
  const savedConfigs = state.balance.savedConfigs;
  const comparisonItems = state.balance.comparisonItems;
  
  // –°–æ–∑–¥–∞–µ–º –∫—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const priceCacheRef = useRef<Map<string, number>>(new Map());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è craftValue —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  const craftValueUpdateRef = useRef<{
    timer: ReturnType<typeof setTimeout> | null;
    lastUpdateTime: number;
    isUpdating: boolean;
    pendingUpdate: boolean;
    lastCallId?: string;      // –ù–æ–≤–æ–µ: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    lastCallIdTime?: number;  // –ù–æ–≤–æ–µ: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ 
    hasInitialUpdate?: boolean; // –ù–æ–≤–æ–µ: —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }>({
    timer: null,
    lastUpdateTime: 0,
    isUpdating: false,
    pendingUpdate: false,
    hasInitialUpdate: false   // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  const deepEqual = (obj1: ComparableObject, obj2: ComparableObject): boolean => {
    if (obj1 === obj2) return true;
    if (obj1 === null || obj2 === null) return false;
    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return obj1 === obj2;
    
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    
    if (keys1.length !== keys2.length) return false;
    
    for (const key of keys1) {
      if (key === 'version') continue; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
      if (!deepEqual(obj1[key], obj2[key])) return false;
    }
    
    return true;
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const lastUpdateRef = useRef<{ 
    config: Partial<BalanceConfig> | null, 
    timestamp: number 
  }>({ config: null, timestamp: 0 });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
  const updateConfig = useCallback((config: Partial<BalanceConfig>) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const now = Date.now();
    const timeSinceLastUpdate = now - lastUpdateRef.current.timestamp;
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ (–º–µ–Ω–µ–µ 200–º—Å), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (timeSinceLastUpdate < 200 && lastUpdateRef.current.config) {
      // –ù–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftTimeConfig.version
      const isOnlyVersionUpdate = 
        config.craftTimeConfig && 
        Object.keys(config).length === 1 && 
        Object.keys(config.craftTimeConfig).length === 1 &&
        'version' in config.craftTimeConfig;
      
      if (!isOnlyVersionUpdate) {
        console.log("üö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ");
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è craftTimeConfig
    if (config.craftTimeConfig && currentConfig.craftTimeConfig) {
      // –ï—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—è –∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      const onlyVersionChanged = 
        Object.keys(config.craftTimeConfig).length === 1 && 
        'version' in config.craftTimeConfig;
      
      if (!onlyVersionChanged) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª—É–±–æ–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const configWithoutVersion = { ...config.craftTimeConfig };
        delete configWithoutVersion.version;
        
        const currentWithoutVersion = { ...currentConfig.craftTimeConfig };
        delete currentWithoutVersion.version;
        
        if (deepEqual(configWithoutVersion as ComparableObject, currentWithoutVersion as ComparableObject) && Object.keys(config).length === 1) {
          console.log("üö´ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ craftTimeConfig");
          return;
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    lastUpdateRef.current = { config, timestamp: now };
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const updatedConfig = { ...currentConfig, ...config };
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–µ–Ω –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (
      config.baseValue !== undefined || 
      config.tierMultiplier !== undefined ||
      config.weights !== undefined ||
      config.categories !== undefined ||
      config.mechanics !== undefined ||
      config.craftBaseMultiplier !== undefined ||
      config.craftComplexityMultiplier !== undefined ||
      config.subTypeModifiers !== undefined ||
      config.currentSeason !== undefined ||
      config.seasonalCategoryModifiers !== undefined ||
      config.seasonalSubTypeModifiers !== undefined ||
      config.growthDayMultiplier !== undefined
    ) {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
      priceCacheRef.current.clear();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", config);
    updateState('balance.currentConfig', updatedConfig);
  }, [currentConfig, updateState]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è craftValue
  const executeCraftValuesUpdate = useCallback(() => {
    const updateStateRef = craftValueUpdateRef.current;
    updateStateRef.isUpdating = true;
    
    console.log("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftValue...");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
    setTimeout(() => {
      try {
        if (!state.craftSystem.recipes || state.craftSystem.recipes.length === 0) {
          console.log("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è craftValue");
          updateStateRef.isUpdating = false;
          return;
        }
        
        // –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updatedItems = [...comparisonItems];
        let hasChanges = false;
        let changesCount = 0;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç ItemData –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        const resourceItems = state.resources.items.map(item => ({
          name: item.name,
          tier: 1,
          mechanic: '–ù–∞–π—Ç–∏ –≤ –º–∏—Ä–µ',
          selectedCategories: [item.category],
          selectedModifiers: [],
          selectedLocations: [],
          frequencyType: '–ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–π',
          craftComplexity: '–ù–µ –∫—Ä–∞—Ñ—Ç–∏—Ç—å—Å—è',
          imageId: item.imageId || null // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ imageId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ItemData
        }));
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        const allItems = [...updatedItems, ...resourceItems];
        
        // –°–æ–∑–¥–∞–µ–º Set —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã
        const recipeItemNames = new Set(state.craftSystem.recipes.map(r => r.resultItemName));
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å craftValue
        updatedItems.forEach((item, index) => {
          const hasRecipe = recipeItemNames.has(item.name);
          
          // –ï—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç, –Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ hasCraftRecipe –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç craftValue
          // –ò–õ–ò —É –ø—Ä–µ–¥–º–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ hasCraftRecipe, –Ω–æ –¥–ª—è –Ω–µ–≥–æ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞
          if ((hasRecipe && (!item.hasCraftRecipe || item.craftValue === undefined)) ||
              (!hasRecipe && item.hasCraftRecipe)) {
            
            if (hasRecipe) {
              // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç
              const recipe = state.craftSystem.recipes.find(r => r.resultItemName === item.name);
              if (recipe) {
                try {
                  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ craftValue
                  const newCraftValue = calculateCraftResultValue(recipe, allItems, currentConfig);
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
                  updatedItems[index] = {
                    ...updatedItems[index],
                    hasCraftRecipe: true,
                    craftValue: newCraftValue
                  };
                  
                  hasChanges = true;
                  changesCount++;
                } catch (error) {
                  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ craftValue –¥–ª—è ${recipe.resultItemName}:`, error);
                }
              }
            } else {
              // –ï—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞, –Ω–æ –µ—Å—Ç—å —Ñ–ª–∞–≥ hasCraftRecipe - —É–±–∏—Ä–∞–µ–º –µ–≥–æ
              updatedItems[index] = {
                ...updatedItems[index],
                hasCraftRecipe: false,
                craftValue: undefined
              };
              
              hasChanges = true;
              changesCount++;
            }
          }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (hasChanges) {
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è craftValue (${changesCount} –∏–∑–º–µ–Ω–µ–Ω–∏–π)`);
          updateState('balance.comparisonItems', updatedItems);
        } else {
          console.log("üö´ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ craftValue - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updateStateRef.lastUpdateTime = Date.now();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
          updateStateRef.isUpdating = false;
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
          if (updateStateRef.pendingUpdate) {
            updateStateRef.pendingUpdate = false;
            updateCraftValuesForAllItems();
          }
        }, 300);
        
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ craftValue:", error);
        updateStateRef.isUpdating = false;
      }
    }, 0);
  }, [state.craftSystem.recipes, comparisonItems, currentConfig, state.resources.items, updateState]);
  
  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è craftValue —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  const updateCraftValuesForAllItems = useCallback(() => {
    const updateStateRef = craftValueUpdateRef.current;
    const now = Date.now();
    const MIN_UPDATE_INTERVAL = 2500; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 2.5 —Å–µ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    
    // –ù–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ 
    const callId = now.toString();
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–∑-–∑–∞ StrictMode (–∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω–µ–µ 100–º—Å)
    if (updateStateRef.lastCallId && (now - (updateStateRef.lastCallIdTime || 0) < 100)) {
      // –¢–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –∏–∑ StrictMode –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –≤—ã–∑–æ–≤–µ
    updateStateRef.lastCallId = callId;
    updateStateRef.lastCallIdTime = now;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    if (!updateStateRef.hasInitialUpdate) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      updateStateRef.hasInitialUpdate = true;
      
      // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±—É–¥—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      updateStateRef.lastUpdateTime = now;
      console.log("üîÑ –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftValue...");
      executeCraftValuesUpdate();
      return;
    }
    
    console.log("üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftValue...");
    
    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (updateStateRef.isUpdating) {
      updateStateRef.pendingUpdate = true;
      console.log("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftValue —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Å–ª–µ–¥—É—é—â–µ–µ –±—É–¥–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–æ");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const timeSinceLastUpdate = now - updateStateRef.lastUpdateTime;
    if (timeSinceLastUpdate < MIN_UPDATE_INTERVAL) {
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –Ω–µ–¥–∞–≤–Ω–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ –Ω–∞ –±—É–¥—É—â–µ–µ
      if (updateStateRef.timer) clearTimeout(updateStateRef.timer);
      
      console.log(`‚è≥ –û—Ç–ª–æ–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ craftValue –Ω–∞ ${MIN_UPDATE_INTERVAL - timeSinceLastUpdate}–º—Å`);
      
      updateStateRef.timer = setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        if (updateStateRef.lastCallId === callId) {
          executeCraftValuesUpdate();
        }
      }, MIN_UPDATE_INTERVAL - timeSinceLastUpdate);
      
      return;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    executeCraftValuesUpdate();
  }, [executeCraftValuesUpdate]);
  
  // –î–µ–±–∞—É–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è craftValue –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  useEffect(() => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞
    const timer = setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å craftValue
      if (
        currentConfig.craftBaseMultiplier !== undefined || 
        currentConfig.craftComplexityMultiplier !== undefined ||
        currentConfig.baseValue !== undefined ||
        currentConfig.weights !== undefined
      ) {
        updateCraftValuesForAllItems();
      }
    }, 800); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    return () => clearTimeout(timer);
  }, [currentConfig, updateCraftValuesForAllItems]);
  
  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
  const setCurrentSeason = useCallback((season: string) => {
    if (!currentConfig.seasons || !currentConfig.seasons.includes(season)) {
      console.error(`–°–µ–∑–æ–Ω "${season}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Å–µ–∑–æ–Ω–æ–≤`);
      return;
    }
    
    updateConfig({ currentSeason: season });
    
    // –û—á–∏—â–∞–µ–º –∫—ç—à, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    priceCacheRef.current.clear();
  }, [currentConfig.seasons, updateConfig]);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const saveCurrentConfig = useCallback((name?: string) => {
    const configToSave = {
      ...currentConfig,
      name: name || currentConfig.name,
      createdAt: new Date().toISOString(),
      craftTimeConfig: currentConfig.craftTimeConfig ? {
        ...currentConfig.craftTimeConfig,
        version: Date.now()
      } : currentConfig.craftTimeConfig
    };
    
    const existingIndex = savedConfigs.findIndex(config => config.id === configToSave.id);
    
    if (existingIndex !== -1) {
      const updatedConfigs = [...savedConfigs];
      updatedConfigs[existingIndex] = configToSave;
      updateState('balance.savedConfigs', updatedConfigs);
    } else {
      updateState('balance.savedConfigs', [...savedConfigs, configToSave]);
    }
    
    updateState('balance.currentConfig', configToSave);
  }, [currentConfig, savedConfigs, updateState]);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ–∑–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const createNewConfig = useCallback((name: string) => {
    console.log("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", name);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const newConfigId = `config-${Date.now()}`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const seasons = currentConfig.seasons || DEFAULT_SEASONS;
    const currentSeason = currentConfig.currentSeason || seasons[0];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    let seasonalCategoryModifiers = currentConfig.seasonalCategoryModifiers || {};
    if (!seasonalCategoryModifiers || Object.keys(seasonalCategoryModifiers).length === 0) {
      seasonalCategoryModifiers = {};
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–æ–≤
      Object.keys(currentConfig.categories).forEach(category => {
        seasonalCategoryModifiers[category] = {};
        seasons.forEach(season => {
          seasonalCategoryModifiers[category][season] = 1.0; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        });
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    let seasonalSubTypeModifiers = currentConfig.seasonalSubTypeModifiers || {};
    if (!seasonalSubTypeModifiers || Object.keys(seasonalSubTypeModifiers).length === 0) {
      seasonalSubTypeModifiers = {};
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ç–∏–ø–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (currentConfig.subTypeModifiers) {
        Object.keys(currentConfig.subTypeModifiers).forEach(subType => {
          seasonalSubTypeModifiers[subType] = {};
          seasons.forEach(season => {
            seasonalSubTypeModifiers[subType][season] = 1.0; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
          });
        });
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ
    const newConfig: BalanceConfig = {
      id: newConfigId,
      name: name,
      baseValue: currentConfig.baseValue,
      weights: { ...currentConfig.weights },
      categories: { ...currentConfig.categories },
      mechanics: { ...currentConfig.mechanics },
      tierMultiplier: currentConfig.tierMultiplier,
      modifiers: { ...currentConfig.modifiers },
      locations: { ...currentConfig.locations },
      frequencyTypes: { ...currentConfig.frequencyTypes },
      craftComplexityTypes: { ...currentConfig.craftComplexityTypes },
      subTypeModifiers: currentConfig.subTypeModifiers ? { ...currentConfig.subTypeModifiers } : {},
      
      // –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      currentSeason: currentSeason,
      seasons: [...seasons],
      seasonalCategoryModifiers: JSON.parse(JSON.stringify(seasonalCategoryModifiers)),
      seasonalSubTypeModifiers: JSON.parse(JSON.stringify(seasonalSubTypeModifiers)),
      growthDayMultiplier: currentConfig.growthDayMultiplier || 5.0, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –≤–∞–ª—é—Ç—ã –∑–∞ –¥–µ–Ω—å —Ä–æ—Å—Ç–∞
      
      sellDiscount: currentConfig.sellDiscount,
      buyMarkup: currentConfig.buyMarkup,
      craftBaseMultiplier: currentConfig.craftBaseMultiplier,
      craftComplexityMultiplier: currentConfig.craftComplexityMultiplier,
      craftTimeConfig: currentConfig.craftTimeConfig 
        ? { ...currentConfig.craftTimeConfig,
            categoryTimeMultipliers: { ...currentConfig.craftTimeConfig.categoryTimeMultipliers },
            version: Date.now() // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
          } 
        : {
            baseTimesByComplexity: {
              '–û—á–µ–Ω—å –ª–µ–≥–∫–æ': 20,
              '–õ–µ–≥–∫–æ': 30,
              '–°—Ä–µ–¥–Ω–µ': 45,
              '–°–ª–æ–∂–Ω–æ': 60,
              '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ': 90
            },
            ingredientBaseTime: 3,
            ingredientScalingFactor: 0.7,
            levelMultiplier: 0.2,
            categoryTimeMultipliers: { ...currentConfig.categories },
            version: Date.now() // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          },
      version: currentConfig.version,
      createdAt: new Date().toISOString()
    };
    
    console.log("–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å ID:", newConfig.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
    if (currentConfig.id !== 'default') {
      const currentInSaved = savedConfigs.find(c => c.id === currentConfig.id);
      
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      if (!currentInSaved || !deepEqual(currentInSaved as ComparableObject, currentConfig as ComparableObject)) {
        console.log("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º");
        const updatedSavedConfigs = savedConfigs.filter(c => c.id !== currentConfig.id);
        updatedSavedConfigs.push({ ...currentConfig });
        updateState('balance.savedConfigs', updatedSavedConfigs);
      }
    }
    
    // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–µ–ª–∞–µ–º –µ–µ —Ç–µ–∫—É—â–µ–π
    // –î–µ–ª–∞–µ–º —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Promise –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
    const addNewConfig = async () => {
      // 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ savedConfigs
      console.log("–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫");
      updateState('balance.savedConfigs', [...savedConfigs, newConfig]);
      
      // 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 100));
      
      // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ —Ç–µ–∫—É—â—É—é
      console.log("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫ —Ç–µ–∫—É—â—É—é");
      updateState('balance.currentConfig', newConfig);
      
      // 4. –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–µ–Ω –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      priceCacheRef.current.clear();
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    addNewConfig();
  }, [currentConfig, savedConfigs, updateState]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const loadConfig = useCallback((configId: string) => {
    const config = savedConfigs.find(config => config.id === configId);
    if (config) {
      console.log("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:", config.name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      let configWithSeasons = { ...config };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      if (!configWithSeasons.seasons || configWithSeasons.seasons.length === 0) {
        configWithSeasons.seasons = DEFAULT_SEASONS;
      }
      
      if (!configWithSeasons.currentSeason || !configWithSeasons.seasons.includes(configWithSeasons.currentSeason)) {
        configWithSeasons.currentSeason = configWithSeasons.seasons[0];
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (!configWithSeasons.seasonalCategoryModifiers) {
        configWithSeasons.seasonalCategoryModifiers = {};
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        Object.keys(configWithSeasons.categories).forEach(category => {
          configWithSeasons.seasonalCategoryModifiers[category] = {};
          configWithSeasons.seasons.forEach(season => {
            configWithSeasons.seasonalCategoryModifiers[category][season] = 1.0;
          });
        });
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤
      if (!configWithSeasons.seasonalSubTypeModifiers) {
        configWithSeasons.seasonalSubTypeModifiers = {};
        if (configWithSeasons.subTypeModifiers) {
          Object.keys(configWithSeasons.subTypeModifiers).forEach(subType => {
            configWithSeasons.seasonalSubTypeModifiers[subType] = {};
            configWithSeasons.seasons.forEach(season => {
              configWithSeasons.seasonalSubTypeModifiers[subType][season] = 1.0;
            });
          });
        }
      }
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–Ω–µ–π —Ä–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (configWithSeasons.growthDayMultiplier === undefined) {
        configWithSeasons.growthDayMultiplier = 5.0;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é craftTimeConfig –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const loadedConfig = { 
        ...configWithSeasons,
        craftTimeConfig: configWithSeasons.craftTimeConfig ? {
          ...configWithSeasons.craftTimeConfig,
          version: Date.now() // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        } : configWithSeasons.craftTimeConfig
      };
      
      updateState('balance.currentConfig', loadedConfig);
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à —Ü–µ–Ω –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      priceCacheRef.current.clear();
    }
  }, [savedConfigs, updateState]);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const deleteConfig = useCallback((configId: string) => {
    const updatedConfigs = savedConfigs.filter(config => config.id !== configId);
    updateState('balance.savedConfigs', updatedConfigs);
  }, [savedConfigs, updateState]);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const addItemToComparison = useCallback((item: ItemData) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ imageId –Ω–µ undefined –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if (item.imageId === undefined) {
      item.imageId = null;
    }
    
    updateState('balance.comparisonItems', [...comparisonItems, item]);
  }, [comparisonItems, updateState]);
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const removeItemFromComparison = useCallback((index: number) => {
    const newItems = [...comparisonItems];
    newItems.splice(index, 1);
    updateState('balance.comparisonItems', newItems);
  }, [comparisonItems, updateState]);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  const updateItemInComparison = useCallback((index: number, updatedItem: ItemData) => {
    if (index < 0 || index >= comparisonItems.length) {
      console.error(`Invalid index: ${index}, items length: ${comparisonItems.length}`);
      return;
    }
    
    const newItems = [...comparisonItems];
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ imageId –Ω–µ undefined –ø–µ—Ä–µ–¥ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ–º
    if (updatedItem.imageId === undefined) {
      updatedItem.imageId = null;
    }
    
    newItems[index] = updatedItem;
    updateState('balance.comparisonItems', newItems);
  }, [comparisonItems, updateState]);
  
  // –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Å–µ–∑–æ–Ω–∞)
  const calculateBaseItemCost = useCallback((item: ItemData): number => {
    if (!item) return 0;
    
    // –ï—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—Å—Ç—å craftValue –∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞—Ñ—Ç–æ–≤—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (item.craftValue !== undefined && item.craftValue > 0 && item.hasCraftRecipe === true) {
      return item.craftValue;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —É—Ä–æ–∂–∞–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
    if (item.isHarvest) {
      const seedCost = item.seedCost || 0;
      const growingTime = item.growingTime || 0;
      const harvestPerSeason = item.harvestPerSeason || 1;
      const dayMultiplier = currentConfig.growthDayMultiplier || 1.0;
      
      // –§–æ—Ä–º—É–ª–∞: (—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—è–Ω + (–≤—Ä–µ–º—è —Ä–æ—Å—Ç–∞ * –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–Ω—è)) / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ —Å–µ–∑–æ–Ω
      const harvestCost = (seedCost + (growingTime * dayMultiplier)) / harvestPerSeason;
      
      // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
      return Math.round(harvestCost);
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    const categoryWeight = currentConfig.weights.categoryWeight || 0;
    const tierWeight = currentConfig.weights.tierWeight || 0;
    const mechanicWeight = currentConfig.weights.mechanicWeight || 0;
    const modifiersWeight = currentConfig.weights.modifiersWeight || 0;
    const locationsWeight = currentConfig.weights.locationsWeight || 0;
    const frequencyWeight = currentConfig.weights.frequencyWeight || 0;
    const craftComplexityWeight = currentConfig.weights.craftComplexityWeight || 0;
    const baseValue = currentConfig.baseValue || 0;
    const tierMultiplier = currentConfig.tierMultiplier || 0;
    
    // –†–∞—Å—á–µ—Ç –≤–ª–∏—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categorySum = item.selectedCategories.reduce((sum: number, cat: string) => {
      return sum + (currentConfig.categories[cat] || 0);
    }, 0);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const categoryComponent = categoryWeight * 
      (item.selectedCategories.length > 0 ? categorySum / item.selectedCategories.length : 0);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏—Ä–∞ (—É—Ä–æ–≤–Ω—è)
    const tierComponent = tierWeight * 
      (1 + (item.tier - 1) * tierMultiplier);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—Ö–∞–Ω–∏–∫–∏
    const mechanicComponent = mechanicWeight * 
      (currentConfig.mechanics[item.mechanic] || 1);
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    const modifiersSum = item.selectedModifiers.reduce((sum: number, mod: string) => {
      return sum + (currentConfig.modifiers[mod] || 0);
    }, 0);
    
    const modifiersComponent = modifiersWeight * 
      (item.selectedModifiers.length > 0 ? modifiersSum / item.selectedModifiers.length : 1);
      
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ª–æ–∫–∞—Ü–∏–π
    const locationsSum = item.selectedLocations.reduce((sum: number, loc: string) => {
      return sum + (currentConfig.locations[loc] || 0);
    }, 0);
    
    const locationsComponent = locationsWeight * 
      (item.selectedLocations.length > 0 ? locationsSum / item.selectedLocations.length : 1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    const frequencyComponent = frequencyWeight * 
      (currentConfig.frequencyTypes[item.frequencyType] || 1.0);
    
    const craftComplexityComponent = craftComplexityWeight * 
      (currentConfig.craftComplexityTypes[item.craftComplexity] || 1.0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ–¥—Ç–∏–ø–∞
    let subTypeMultiplier = 1.0;
    if (item.subType && currentConfig.subTypeModifiers && currentConfig.subTypeModifiers[item.subType]) {
      subTypeMultiplier = currentConfig.subTypeModifiers[item.subType];
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –ø–æ–¥—Ç–∏–ø–∞
    let total = baseValue * 
      (categoryComponent + tierComponent + mechanicComponent + modifiersComponent + 
      locationsComponent + frequencyComponent + craftComplexityComponent);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ–¥—Ç–∏–ø–∞ –∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total *= subTypeMultiplier;
    
    return Math.round(total);
  }, [currentConfig]);
  
  // –†–∞—Å—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
  const calculateSeasonalModifier = useCallback((item: ItemData, season: string): number => {
    if (!season || !currentConfig.seasons || !currentConfig.seasons.includes(season)) {
      return 1.0; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ —Å–µ–∑–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
    }
    
    let modifier = 1.0;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (currentConfig.seasonalCategoryModifiers) {
      item.selectedCategories.forEach(category => {
        const categoryModifiers = currentConfig.seasonalCategoryModifiers[category];
        if (categoryModifiers && categoryModifiers[season]) {
          // –£—Å—Ä–µ–¥–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          modifier *= (categoryModifiers[season] || 1.0);
        }
      });
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (item.selectedCategories.length > 0) {
        modifier = Math.pow(modifier, 1 / item.selectedCategories.length);
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ç–∏–ø–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (item.subType && currentConfig.seasonalSubTypeModifiers) {
      const subTypeModifiers = currentConfig.seasonalSubTypeModifiers[item.subType];
      if (subTypeModifiers && subTypeModifiers[season]) {
        modifier *= (subTypeModifiers[season] || 1.0);
      }
    }
    
    // –î–ª—è —É—Ä–æ–∂–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å–µ–∑–æ–Ω –¥–ª—è —Ä–æ—Å—Ç–∞
    if (item.isHarvest && item.growingSeason) {
      // –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
      if (item.growingSeason.includes(season)) {
        // –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
      } else {
        // –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–æ—Å—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç (–¥–µ—Ñ–∏—Ü–∏—Ç)
        modifier *= 1.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 50%
      }
    }
    
    return modifier;
  }, [currentConfig]);
  
  // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–∞
  const calculateSeasonalItemCost = useCallback((item: ItemData, season?: string): number => {
    if (!item) return 0;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–µ–∑–æ–Ω - —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const useSeason = season || currentConfig.currentSeason;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–∞
    const cacheKey = `${item.name}_${item.tier}_${item.subType || 'none'}_${useSeason}_${currentConfig.id}_${currentConfig.version}_${item.hasCraftRecipe}_${item.craftValue}_${item.selectedCategories.join(',')}_${item.selectedModifiers.join(',')}_${item.selectedLocations.join(',')}_${item.frequencyType || ''}_${item.craftComplexity || ''}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à–µ
    if (priceCacheRef.current.has(cacheKey)) {
      const cachedValue = priceCacheRef.current.get(cacheKey);
      return cachedValue !== undefined ? cachedValue : 0;
    }
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const baseCost = calculateBaseItemCost(item);
    
    // –°–µ–∑–æ–Ω–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const seasonalModifier = calculateSeasonalModifier(item, useSeason);
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–∞
    const finalCost = Math.round(baseCost * seasonalModifier);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    priceCacheRef.current.set(cacheKey, finalCost);
    
    return finalCost;
  }, [currentConfig, calculateBaseItemCost, calculateSeasonalModifier]);
  
  // –¢–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ç–µ–∫—É—â–∏–º —Å–µ–∑–æ–Ω–æ–º)
  const calculateItemCost = useCallback((item: ItemData): number => {
    return calculateSeasonalItemCost(item, currentConfig.currentSeason);
  }, [calculateSeasonalItemCost, currentConfig.currentSeason]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–æ –≤—Å–µ—Ö —Å–µ–∑–æ–Ω–∞—Ö
  const getSeasonalProfitability = useCallback((item: ItemData): Record<string, number> => {
    if (!item.isHarvest) {
      return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–µ-—É—Ä–æ–∂–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    }
    
    const result: Record<string, number> = {};
    const seasons = currentConfig.seasons || DEFAULT_SEASONS;
    
    seasons.forEach(season => {
      const seasonalCost = calculateSeasonalItemCost(item, season);
      const seedCost = item.seedCost || 0;
      const growingTime = item.growingTime || 1;
      
      // –ü—Ä–∏–±—ã–ª—å = (–°—Ç–æ–∏–º–æ—Å—Ç—å - –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–º—è–Ω) / –í—Ä–µ–º—è —Ä–æ—Å—Ç–∞
      // –≠—Ç–æ –¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è
      const profitability = (seasonalCost - seedCost) / growingTime;
      
      result[season] = profitability;
    });
    
    return result;
  }, [currentConfig.seasons, calculateSeasonalItemCost]);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const contextValue = useMemo(() => ({
    currentConfig,
    savedConfigs,
    comparisonItems,
    updateConfig,
    saveCurrentConfig,
    createNewConfig,
    loadConfig,
    deleteConfig,
    addItemToComparison,
    removeItemFromComparison,
    calculateItemCost,
    calculateSeasonalItemCost,
    updateItemInComparison,
    updateCraftValuesForAllItems,
    setCurrentSeason,
    getSeasonalProfitability
  }), [
    currentConfig,
    savedConfigs,
    comparisonItems,
    updateConfig,
    saveCurrentConfig,
    createNewConfig,
    loadConfig,
    deleteConfig,
    addItemToComparison,
    removeItemFromComparison,
    calculateItemCost,
    calculateSeasonalItemCost,
    updateItemInComparison,
    updateCraftValuesForAllItems,
    setCurrentSeason,
    getSeasonalProfitability
  ]);
  
  return (
    <BalanceContext.Provider value={contextValue}>
      {children}
    </BalanceContext.Provider>
  );
}